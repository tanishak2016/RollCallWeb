#pragma checksum "G:\RollCallWeb\Areas\RollCall\Views\Candidate\cylender.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f3177d2fcc97bb08057087da24c1984f62292c84"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_RollCall_Views_Candidate_cylender), @"mvc.1.0.view", @"/Areas/RollCall/Views/Candidate/cylender.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "G:\RollCallWeb\Areas\RollCall\Views\_ViewImports.cshtml"
using RollCall;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\RollCallWeb\Areas\RollCall\Views\_ViewImports.cshtml"
using RollCall.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f3177d2fcc97bb08057087da24c1984f62292c84", @"/Areas/RollCall/Views/Candidate/cylender.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5891ee3185a2b4ebc1b32fc1c65a94a517da5870", @"/Areas/RollCall/Views/_ViewImports.cshtml")]
    public class Areas_RollCall_Views_Candidate_cylender : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<figure class=""highcharts-figure"">
    <div style=""background-color:white;text-align:center"">
        <span id=""present"" style=""color: green; font-family: math; font-size: x-large"">Total Present :  
        <label id=""lblPresent""></label>     
            
            </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span id=""absent"" style=""color: green; font-family: math; font-size: x-large"">
            Total Absent :
            <label id=""lblAbsent""></label>

        </span>

    </div>
    <div id=""container"">
    </div>
</figure>


<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""></script>

");
            WriteLiteral("\r\n\r\n   \r\n\r\n\r\n<script>\r\n\r\n    $(document).ready(function () {\r\n        \r\n    });\r\n\r\n     $(function  () {\r\n        debugger;\r\n                 $.ajax({\r\n                url: \'");
#nullable restore
#line 41 "G:\RollCallWeb\Areas\RollCall\Views\Candidate\cylender.cshtml"
                 Write(Url.Action("cylender", "Candidate", new { area="RollCall"}));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
              //  url:'http://52.140.87.149/api/CenterDetail',
                dataType: ""json"",
                type: ""POST"",
                contentType: 'application/json; charset=utf-8',
                async: false,
                processData: false,
                cache: false,
                delay: 15,
                success: function (data) {
                    debugger;
                    let series = [];
                    let totalSeries = [];                                       
                    for (let i in data) {
                        let pieData = {};
                        pieData.name = data[i].name;
                        pieData.y = data[i].y;
                        totalSeries.push(data[i].total);
                        series.push(pieData);
                    }

                    //setInterval(function () {
                    //    DrawPieChart(series, totalSeries);

                    //}, 5000);
                    DrawPieChart(series");
            WriteLiteral(@", totalSeries);
                     },

                error: function (xhr) {
                    alert('error');
                }
            });
        });

    function DrawPieChart(series, totalSeries) {
        $('#lblPresent').text(totalSeries[0]);
        $('#lblAbsent').text(totalSeries[0]-series[2].y);


            var xAxisCategories = $.map(series,(elem) => {
                return elem.name;
            });
            var yAxisValues = $.map(series,(elem) => {
                return elem.y;
            });

        $('#container').highcharts({
           /* colors: ['#811010', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'],*/
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: 1, //null,
                plotShadow: true
            },
            title: {
                text: ''
                },
            xAxis:{
                 categories: xAxisCategories,
          ");
            WriteLiteral(@"       crosshair: true                        
            },
            tooltip: {
                    formatter: function () {
                    // let percent = (100 * this.y) / total;
                    //percent = percent.toFixed(1);
                    //return '<span style=""font-size:13px;color:red"">' + percent + '% </span>';
                    return '<b></b><br/>' +
                    '<span style=color:red;font-size:13px>' + this.series.name + '</span >' + ': ' + '<span style=color:red;font-size:13px>' + this.point.y + '</span>' + '<br/>'
                    },
                    //  pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                    //headerFormat: '<span style=""font-size:13px;color:red"">{point.key}</span><table>',
                    //pointFormat: '<tr href=""#"">' + '<td style=""padding:0;color:red""><b> {100*point.y)/total:.1f}% </b></td></tr>',
                    //footerFormat: '</table>'
                },
            plotOptions: {           ");
            WriteLiteral(@"     
                column: {
                    bar: {
                        colorByPoint:true
                    },
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                            enabled: true,
                            format: '<span style=color:red;font-size:13px>{point.namess} {point.y}</span>',
                        },
                       // showInLegend: true
                }
            },
                series: [{
                    type: 'column',
                    colorKey: 'colorValue',                    
                    data: series                   
                },
                    {
                    type: 'column',
                    name: 'Total',
                    data: totalSeries
                }]        
            });           
        }
</script>





    <style>

        .highcharts-figure, .highcharts-data-table table {
            ");
            WriteLiteral(@"min-width: 310px;
            max-width: 800px;
            margin: 1em auto;
        }

        #container {
            height: 400px;
        }        

        .highcharts-data-table table {
            font-family: Verdana, sans-serif;
            border-collapse: collapse;
            border: 1px solid #EBEBEB;
            margin: 10px auto;
            text-align: center;
            width: 100%;
            max-width: 500px;
        }

        .highcharts-data-table caption {
            padding: 1em 0;
            font-size: 1.2em;
            color: #555;
        }

        .highcharts-data-table th {
            font-weight: 600;
            padding: 0.5em;
        }

        .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {
            padding: 0.5em;
        }

        .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {
            background: #f8f8f8;
        }

        .highcharts-data-table tr:h");
            WriteLiteral("over {\r\n            background: #f1f7ff;\r\n        }\r\n    </style>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
